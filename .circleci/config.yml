# Javascript Node CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
# build , test , push to docker hub , deploy without workflows
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/node:8.11.1-stretch
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
  test:
    docker:
      - image: circleci/node:8.11.1-stretch
    working_directory: ~/repo  
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run: npm test
  ship:
    docker:
      - image: circleci/node:8.11.1-stretch
    working_directory: ~/repo  
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: npm install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - setup_remote_docker
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
      - run:
          name: "Build docker image and push to docker hub"
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              cp Dockerfile.production Dockerfile
              docker build -t ima8/example-nodejs-circle:latest .
              docker build -t ima8/example-nodejs-circle:${CIRCLE_SHA1} .
              docker push ima8/example-nodejs-circle:latest
              docker push ima8/example-nodejs-circle:${CIRCLE_SHA1}
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
              cp Dockerfile.staging Dockerfile
              docker build -t ima8/example-nodejs-circle-staging:latest .
              docker push ima8/example-nodejs-circle-staging:latest
            else
              echo "This is ${CIRCLE_BRANCH}"
            fi
  deploy:
    docker:
      - image: circleci/node:8.11.1-stretch
    working_directory: ~/repo  
    steps:
      - setup_remote_docker
      - run:
          name: "Call to rancher to deploy"
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker run --rm -it \
                -e CATTLE_ACCESS_KEY="$CATTLE_ACCESS_KEY" \
                -e CATTLE_SECRET_KEY="$CATTLE_SECRET_KEY" \
                -e CATTLE_URL="$CATTLE_URL" \
                etlweather/gaucho upgrade $RANCHER_EXAMPLE_NODEJS \
                --imageUuid 'docker:ima8/example-nodejs-circle:latest' \
                --batch_size 3 --start_first \
                --auto_complete --timeout 600 \
                /
            elif [ "${CIRCLE_BRANCH}" == "staging" ]; then
               docker run --rm -it \
                -e CATTLE_ACCESS_KEY="$CATTLE_ACCESS_KEY" \
                -e CATTLE_SECRET_KEY="$CATTLE_SECRET_KEY" \
                -e CATTLE_URL="$CATTLE_URL" \
                etlweather/gaucho upgrade $RANCHER_EXAMPLE_NODEJS_STAGING \
                --imageUuid 'docker:ima8/example-nodejs-circle-staging:latest' \
                --batch_size 1 --start_first \
                --auto_complete --timeout 600 \
                /
            else
              echo "This is ${CIRCLE_BRANCH}"
            fi
      - run: echo Done
workflows:
  version: 2
  build_test_ship_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - ship:
          requires:
            - build
            - test
      - deploy:
          type: approval
          requires:
            - build
            - test
            - ship


